name: Deploy to Test Environment

on:
  push:
    branches:
      - develop

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: currency-converter-backend
  ECS_SERVICE: currency-converter-service-test
  ECS_CLUSTER: currency-converter-cluster
  CONTAINER_NAME: currency-converter-backend
  TASK_DEFINITION_FILE: task-definition-test.json 

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    environment: test

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: pytest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_TEST_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2 

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        IMAGE_TAG=$(echo "${{ github.sha }}" | cut -c1-7)
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG} .
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}
        echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

    - name: Render Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1 
      with:
        task-definition: ${{ env.TASK_DEFINITION_FILE }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true